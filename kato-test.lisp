(in-package :cl-nurbs-tests)

(defparameter *width* 640)
(defparameter *height* 480)
(defparameter *line-width* 2.0d0)
(defparameter *density* 50.0d0)
(defparameter *tolerance* 1.0d0)

(defun kato-test (p1 p2 filename)
  (with-open-file (s filename :direction :output :if-exists :supersede)
    (format s "P2~%~d ~d~%255~%" *width* *height*)
    (iter (with length = (point-distance p1 p2))
	  (for y from 0 below *height*)
	  (iter (for x from 0 below *width*)
		(unless (zerop x)
		  (princ #\Space s))
		(for p = (list x y))
		(for p1d = (point-distance p p1))
		(for p2d = (point-distance p p2))
		(for distance = (+ p1d p2d (- length)))
		(cond ((and (< (abs distance) *line-width*)
			    (< p1d length) (< p2d length))
		       (princ (floor (* (abs distance) 255) *line-width*) s))
		      ((< (mod distance *density*) *line-width*)
		       (princ 0 s))
		      (t (princ 255 s))))
	  (terpri s))))

(defun kato-test-2 (p0 p1 p2 p3 filename)
  (with-open-file (s filename :direction :output :if-exists :supersede)
    (format s "P2~%~d ~d~%2~%" *width* *height*)
    (let ((length1 (point-distance p0 p1))
	  (length2 (point-distance p2 p3)))
      (flet ((parameter (x y)
	       (let* ((p (list x y))
		      (p0d (point-distance p p0))
		      (p1d (point-distance p p1))
		      (p2d (point-distance p p2))
		      (p3d (point-distance p p3))
		      (distance1 (+ p0d p1d (- length1)))
		      (distance2 (+ p2d p3d (- length2))))
		 (/ distance1 (+ distance1 distance2))))
	     (on-line-p (q1 q2 x y)
	       (let ((p (list x y))
		     (dir (vnormalize (v- q2 q1))))
		 (and (< (point-distance
			  p (v+ q1 (v* dir (scalar-product (v- p q1) dir))))
			 *tolerance*)
		      (< (max (point-distance p q1)
			      (point-distance p q2))
			 (point-distance q1 q2))))))
	(iter (for y from 0 below *height*)
	      (iter (for x from 0 below *width*)
		    (unless (zerop x)
		      (princ #\Space s))
		    (for current = (mod (parameter x y) *density*))
		    (cond ((or (on-line-p p0 p1 x y)
			       (on-line-p p1 p2 x y)
			       (on-line-p p2 p3 x y))
			   (princ 0 s))
			  ((and (< current *line-width*)
				(let ((minimum
				       (min (mod (parameter (1- x) y) *density*)
					    (mod (parameter (1+ x) y) *density*)
					    (mod (parameter x (1- y)) *density*)
					    (mod (parameter x (1+ y)) *density*))))
				  (<= current minimum)))
			   (princ 1 s))
			  (t (princ 2 s))))
	      (terpri s))))))

;; (kato-test '(250 240) '(390 240) "/tmp/kato.pgm")

#+nil
(let ((*density* 5.0d0)
      (*line-width* 1.0d0))
  (kato-test '(10 240) '(630 240) "/tmp/kato.pgm"))

#+nil
(let ((*density* 0.1d0)
      (*line-width* 0.01d0))
  (kato-test-2 '(180 120) '(250 240) '(390 240) '(460 120) "/tmp/kato.pgm"))

#+nil
(let ((*density* 0.1d0)
      (*line-width* 0.01d0))
  (kato-test-2 '(160 100) '(220 240) '(420 240) '(460 270) "/tmp/kato.pgm"))
