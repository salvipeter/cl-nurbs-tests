(in-package :cl-nurbs-tests)

(flet ((p (x) (round (* 100 x))))
  (iter (for d from 4 to 10)
        (format t "d = ~a~%" d)
        (for x = (iter (for k from 2 below (1- d))
                       (for b = (bernstein d k (/ k d)))
                       (format t "  ~a => ~a%~%" k (p b))
                       (sum b)))
        (format t "===> ~a% [atlag: ~a%]~%~%" (p x) (p (/ x (- d 3))))))

(flet ((p (x) (round (* 100 x))))
  (iter (for d from 4 to 10)
        (format t "d = ~a~%" d)
        (for x = (iter (for j from 2 below (1- d))
                       (for bj = (bernstein d j (/ j d)))
                       (sum (iter (for k from 2 below (1- d))
                                  (for b = (* bj (bernstein d k (/ k d))))
                                  (format t "  ~a,~a => ~a%~%" j k (p b))
                                  (sum b)))))
        (format t "===> ~a% [atlag: ~a%]~%~%" (p x) (p (/ x (- d 3) (- d 3))))))

;;; Blend function images:
(let* ((n 6)
       (d 8)
       (b (bernstein d (/ d 2) 1/2))
       (x (* (/ 4 n) (* b b)))
       (*resolution* 60)
       (*barycentric-type* 'wachspress)
       (*auto-wachspress-central-d* 0.58 #+nil(find-autowp-for-deficiency n d :target x))
       (*auto-wachspress-weights* (make-list n :initial-element (/ (- n 2) n))))
  (format t "n = ~a, d = ~a~%" n d)
  (format t "4-sided central weight: ~a~%" (* b b))
  (format t "Center deficiency: ~a~%" x)
  (format t "Autowachspress weight: ~a~%" *auto-wachspress-central-d*)
  (write-bernstein-blend-autowp "/tmp" n d :density 0.05d0))

(defun write-bernstein-blend-autowp (path n degree &key (use-d t) &allow-other-keys)
  (let ((fname (format nil "~a/~asided-deg~a.obj" path n degree))
        (points (points-from-angles (uniform-angles n))))
    (write-obj-indexed-mesh
     (iter (for p in (vertices points))
           (for def = (deficiency-autowp n degree :position p :use-d use-d))
           (when (< def (- *epsilon*))
             (warn "Negative deficiency: ~a" def))
           (collect (cons (if (< (abs def) *epsilon*) 0 def) p)))
     (triangles n) fname)))

;;; Domain parameterization:
(let* ((n 5)
       (d 6)
       (b (bernstein d (/ d 2) 1/2))
       (x (* (/ 4 n) (* b b)))
       (*resolution* 60)
       (*barycentric-type* 'wachspress)
       (*auto-wachspress-central-d* (/ (- n 2) n) #+nil(find-autowp-for-deficiency n d :target x))
       (*auto-wachspress-weights* (make-list n :initial-element (/ (- n 2) n))))
  (vectorized-distance-function-test (points-from-angles (uniform-angles n))
                                     (cons 'sd (make-list (1- n)))
                                     (format nil "/tmp/~asided-deg~a-domain3.ps" n d)
                                     :density 25 :color nil :resolution 0.001d0
                                     :distance-type 'bary-autowp))

;;; Barycentric lines
(defun write-barycentric-lines (path n &key (density 0.1))
  (labels ((transform (p) (list (+ (* (first p) 250) 250) (- 500 (* (second p) 250))))
           (write-poly (stream points)
             (format stream "~{~f ~}moveto~%~{~{~f ~}lineto~%~}closepath stroke~%"
                     (transform (first points)) (mapcar #'transform (rest points)))))
    (let ((fname (format nil "~a/barycentric-~asided.ps" path n)))
      (with-open-file (s fname :direction :output :if-exists :supersede)
        (format s "%!PS~%")
        (let ((points (points-from-angles (uniform-angles n))))
          (write-ps-indexed-mesh-projection
           (iter (for p in (vertices points))
                 (for l = (elt (barycentric-coordinates points p) 0))
                 (collect (cons l p)))
           (triangles n) s :transform #'transform :axis 0 :lines density)
          (write-poly s points))))))

;;; Find non-negative intervals
(defun deficiency-autowp-negative-p (n d &key (use-d t))
  (iter (for p in (vertices (points-from-angles (uniform-angles n))))
        (for def = (deficiency-autowp n d :position p :use-d use-d))
        (when (< def (- *epsilon*))
          (return def))))
(defun find-autowp-negative-boundary (n d min max &key (iterations 100) (use-d t))
  (flet ((f (x)
           (let ((*auto-wachspress-central-d* x)
                 (*auto-wachspress-weights* (make-list n :initial-element (/ (- n 2) n))))
             (or (deficiency-autowp-negative-p n d :use-d use-d) 1))))
    (binomial-search-root #'f min max iterations)))

(let* ((n 6)
       (d 8)
       (use-d t)
       (iter 10)
       (*resolution* 40)
       (*epsilon* 1.0d-5)
       (*barycentric-type* 'wachspress)
       (*auto-wachspress-central-d* 0.5)
       (*auto-wachspress-weights* (make-list n :initial-element (/ (- n 2) n))))
;(deficiency-autowp n d :use-d use-d)
;(deficiency-autowp-negative-p n d :use-d use-d)
;(find-autowp-negative-boundary n d 0.5 0.6 :iterations iter :use-d use-d)
;(write-bernstein-blend-image-autowp "/tmp" n d :density 0.05)
(write-bernstein-blend-autowp "/tmp" n d :density 0.05)
  )
