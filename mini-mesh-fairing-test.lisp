(defparameter *m* (read-stl "/home/psalvi/project/bme/msh/bottom.stl"))

(multiple-value-bind (points indices) (index-mesh *m*)
  (defparameter *points* points)
  (defparameter *triangles* indices))

(defun neighbors (triangles)
  (let ((result (make-array (length triangles) :initial-element nil)))
    (iter (for (i j k) in triangles)
	  (pushnew j (elt result i))
	  (pushnew k (elt result i))
	  (pushnew i (elt result j))
	  (pushnew k (elt result j))
	  (pushnew i (elt result k))
	  (pushnew j (elt result k)))
    result))

(defparameter *neighbors* (neighbors *triangles*))

(defun fairing (points iteration lambda)
  (iter (repeat iteration)
	(for new-points = (make-array (length points)))
	(iter (for i from 0 below (length points))
	      (for weight-sum = 0)
	      (for point = '(0 0 0))
	      (iter (for j in (elt *neighbors* i))
		    (for weight = (/ (point-distance (elt points i) (elt points j))))
		    (incf weight-sum weight)
		    (setf point (v+ point (v* (elt points j) weight))))
	      (setf point (v* point (/ weight-sum)))
	      (setf (elt new-points i)
		    (v+ (v* (elt points i) (- 1 lambda)) (v* point lambda))))
	(setf points new-points)
	(finally (return new-points))))

(defparameter *faired* (fairing (copy-seq *points*) 10 0.8d0))
(write-ply-indexed-mesh *faired* *triangles* "/home/psalvi/project/bme/msh/bottom-faired.ply")
