(in-package :cl-nurbs-tests)

(defparameter *coords*
  '((((0.0d0 0.0d0 0.0d0)
      (0.8d0 0.0d0 0.0d0)
      (1.6d0 0.0d0 0.0d0)
      (2.4d0 0.0d0 0.0d0))
     ((2.4d0 0.0d0 0.0d0)
      (2.6d0 0.2d0 0.0d0)
      (2.8d0 0.4d0 0.0d0)
      (3.0d0 0.6d0 0.0d0))
     ((3.0d0 0.6d0 0.0d0)
      (3.0d0 2.4d0 0.0d0)
      (3.0d0 4.2d0 0.0d0)
      (3.0d0 6.0d0 0.0d0))
     ((3.0d0 6.0d0 0.0d0)
      (2.0d0 6.0d0 0.0d0)
      (1.0d0 6.0d0 0.0d0)
      (0.0d0 6.0d0 0.0d0))
     ((0.0d0 6.0d0 0.0d0)
      (0.0d0 4.0d0 0.0d0)
      (0.0d0 2.0d0 0.0d0)
      (0.0d0 0.0d0 0.0d0)))
    (((0.8471177944862156d0 1.4135338345864663d0 0.0d0)
      (1.9707762557077626d0 0.6356164383561644d0 0.0d0))
     ((1.9707762557077626d0 0.6356164383561644d0 0.0d0)
       (2.6098360655737705d0 1.7311475409836063d0 0.0d0))
     ((2.6098360655737705d0 1.7311475409836063d0 0.0d0)
      (2.2641509433962264d0 4.150943396226415d0 0.0d0))
     ((2.2641509433962264d0 4.150943396226415d0 0.0d0)
      (0.9354120267260579d0 4.062360801781738d0 0.0d0))
     ((0.9354120267260579d0 4.062360801781738d0 0.0d0)
      (0.8471177944862156d0 1.4135338345864663d0 0.0d0)))))

(write-constraint-grid nil "/tmp/proba.vtk" :coords *coords*)
(write-constraint-ribbons nil "/tmp/proba.vtk" :coords *coords* :resolution 20)
(let ((*resolution* 30)
      (*centralized-line-sweep* 1.0d0)
      (*ribbon-multiplier* 1.0d0)
      (patch-type 'ribbon)
      (distance-type 'line-sweep)
      (domain-type 'circular-mod)) ; type: regular/circular/circular-mod/angular
  (write-patch (domain-from-curves (first *coords*) domain-type) patch-type "/tmp/proba.vtk"
	       :coords *coords* :distance-type distance-type :spider t))

(let ((*centralized-line-sweep* 1.0d0)
      (distance-type 'line-sweep)
      (domain-type 'circular-mod))
  (vectorized-distance-function-test
   (domain-from-curves (first *coords*) domain-type)
   '(s s s s s s) "/tmp/proba.ps"
   :resolution 0.001d0 :density 4 :distance-type distance-type :color t))

;;; Utils

(defun line-line-intersection (l1 l2)
  (let ((l1 (mapcar (lambda (p) (subseq p 0 2)) l1))
	(l2 (mapcar (lambda (p) (subseq p 0 2)) l2)))
    (destructuring-bind (((x1 y1) (x2 y2)) ((x3 y3) (x4 y4))) (list l1 l2)
      (list (/ (- (* (- (* x1 y2) (* y1 x2)) (- x3 x4))
		  (* (- (* x3 y4) (* y3 x4)) (- x1 x2)))
	       (- (* (- x1 x2) (- y3 y4)) (* (- y1 y2) (- x3 x4))))
	    (/ (- (* (- (* x1 y2) (* y1 x2)) (- y3 y4))
		  (* (- (* x3 y4) (* y3 x4)) (- y1 y2)))
	       (- (* (- x1 x2) (- y3 y4)) (* (- y1 y2) (- x3 x4))))))))

(defparameter *pontok*
  '((0.0d0 0.0d0 0.0d0)
    (0.8d0 0.0d0 0.0d0)
    (1.6d0 0.0d0 0.0d0)
    (2.4d0 0.0d0 0.0d0)
    (2.6d0 0.2d0 0.0d0)
    (2.8d0 0.4d0 0.0d0)
    (3.0d0 0.6d0 0.0d0)
    (3.0d0 2.4d0 0.0d0)
    (3.0d0 4.2d0 0.0d0)
    (3.0d0 6.0d0 0.0d0)
    (2.0d0 6.0d0 0.0d0)
    (1.0d0 6.0d0 0.0d0)
    (0.0d0 6.0d0 0.0d0)
    (0.0d0 4.0d0 0.0d0)
    (0.0d0 2.0d0 0.0d0)))
